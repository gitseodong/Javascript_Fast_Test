// .length
// 배열의 길이(숫자)를 반환함.

let arr = ["A", "B", "C"];

console.log(arr.length); // 3

// .at()
// 대상 배열을 인덱싱함.
// 음수 사용 가능, 음수 값을 사용하면 뒤에서부터 인덱싱함.

arr = ["A", "B", "C"];

console.log(arr[0]); // A
console.log(arr.at(0)); // A

console.log(arr[arr.length - 1]); // C
console.log(arr.at(-1)); // C

// .concat()
// 대상 배열과 주어진 배열을 병합해 '새로운 배열'을 반환함.

let arr1 = ["A", "B", "C"];
let arr2 = ["D", "E", "F"];
let arr3 = arr1.concat(arr2);

console.log(arr1); // ["A", "B", "C"]
console.log(arr2); // ["D", "E", "F"]
console.log(arr3); // ["A", "B", "C", "D", "E", "F"]

arr3 = [...arr1, ...arr2]; // concat 대신 전개연산자 사용 가능
console.log(arr3); // ["A", "B", "C", "D", "E", "F"]

// .every()
// 대상 배열의 모든 요소가 콜백 테스트에서 참(truthy)을 반환하는지 확인함.

arr = [1, 2, 3, 4];
let isValid = arr.every((item) => item < 5);
// 콜백 함수의 return값이 모두 true인 경우에만 true를 출력함.
console.log(isValid); // true
isValid = arr.every((item) => item % 2);
console.log(isValid); // false

// .filter()
// 주어진 콜백 테스트를 통과(참(truth)을 반환)하는 모든 요소를 '새로운 배열'로 반환함.
// 모든 요소가 테스트를 통과하지 못하면 빈 배열을 반환함.

let numbers = [1, 20, 7, 9, 104, 0, 58];
let filteredNumbers = numbers.filter((number) => number < 30);
console.log(filteredNumbers); // [1, 20, 7, 9, 0]
filteredNumbers = numbers.filter((number) => number < 0);
console.log(filteredNumbers); // []

let users = [
  { name: "Neo", age: 85 },
  { name: "Amy", age: 22 },
  { name: "Lewis", age: 11 },
];
const adults = users.filter((user) => user.age >= 19);
console.log(adults); // [ { name: "Neo", age: 85 }, { name: "Amy", age: 22 } ]

// .find()
// 대상 배열에서 콜백 테스트를 통과하는 첫 번째 요소를 반환함.
// 첫 번째 요소를 찾으면, 찾는 과정이 종료됨.

arr = [5, 8, 130, 12, 45];
const foundItem = arr.find((item) => item > 10);
console.log(foundItem); // 130

users = [
  { name: "Neo", age: 85 },
  { name: "Amy", age: 22 },
  { name: "Lewis", age: 11 },
];

const foundUser = users.find((user) => user.name === "Amy");
console.log(foundUser); // {name: 'Amy', age: 22}

// .findIndex()
// 대상 배열에서 콜백 테스트를 통과하는 첫 번째 요소의 인덱스를 반환함.
// 첫 번째 요소를 찾으면, 찾는 과정이 종료됨.

arr = [5, 8, 130, 12, 45];
let index = arr.findIndex((item) => item > 10);
console.log(index); // 2

// .flat()
// 대상 배열의 모든 하위 배열을 지정한 깊이(Depth)까지 이어붙인 '새로운 배열'을 생성함.
// 깊이의 기본값은 '1'이다.

arr = [1, 2, [3, 4, 5]];

console.log(arr.flat()); // [1, 2, 3, 4, 5]
console.log(arr); // [1, 2, [3, 4, 5]] , 원본 배열 유지.

arr = [1, 2, [3, 4, [5, 6]]];
console.log(arr.flat()); // [1, 2, 3, 4, [5, 6]]
console.log(arr.flat(2)); // [1, 2, 3, 4, 5, 6]
console.log(arr.flat(5)); // [1, 2, 3, 4, 5, 6]

arr = [1, 2, [3, 4, [5, 6, [7, 8]]]];
console.log(arr.flat(3)); // [1, 2, 3, 4, 5, 6, 7, 8]
console.log(arr.flat(Infinity)); // [1, 2, 3, 4, 5, 6, 7, 8]

// .forEach()
// 대상 배열의 길이만큼 주어진 콜백을 실행함.
// for와 다르게 콜백을 배열의 모든 요소에 무조건 실행함. 반복 종료 불가
// for문은 break와 continue를 이용해 반복을 조절할 수 있음.

arr = ["A", "B", "C"];

arr.forEach((item) => console.log(item));

for (let i = 0; i < arr.length; i++) {
  console.log(arr[i]);
}

// .includes()
// 대상 배열이 특정 요소를 포함하고 있는지 확인함.
// 참조형 데이터의 경우 같은 메모리를 참조하고 있어야 true를 출력함.

arr = [1, 2, 3];
console.log(arr.includes(2)); // true

users = [
  { name: "John", age: 23 },
  { name: "Neo", age: 30 },
  { name: "Lewis", age: 45 },
];

console.log(users.includes({ name: "John", age: 23 })); // false
const neo = users[1];
console.log(users.includes(neo)); // true

// .join()
// 대상 배열의 모든 요소를 구분자로 연결한 문자를 반환함.
// join() == join(',')

arr = ["Apple", "Banana", "Cherry"];
console.log(arr.join()); // Apple,Banana,Cherry
console.log(arr.join(", ")); // Apple, Banana, Cherry
console.log(arr.join("/")); // Apple/Banana/Cherry
console.log(arr.join("")); // AppleBananaCherry

// .map()
// 대상 배열의 길이만큼 주어진 콜백을 실행하고,
// 콜백의 반환 값을 모아 '새로운 배열'을 반환함.

numbers = [1, 2, 3, 4];
let newNumbers = numbers.map((item) => item * 2);
console.log(newNumbers); // [2, 4, 6, 8]
console.log(numbers); // [1, 2, 3, 4], 원본 유지

users = [
  { name: "John", age: 23 },
  { name: "Neo", age: 30 },
  { name: "Lewis", age: 45 },
];

let newUsers = users.map((user) => {
  return {
    ...user,
    isValid: true,
    email: null,
  };
});
console.log(newUsers);

// .pop()
// 대상 배열에서 마지막 요소를 제거하고 그 요소를 반환함.
// 대상 배열 원본이 변경됨.

let fruits = ["Apple", "Banana", "Cherry"];
console.log(fruits.pop()); // Cherry
console.log(fruits); // ['Apple', 'Banana']

// .push()
// 대상 배열에서 마지막 요소를 추가하고, 배열의 새로운 길이를 반환함.
// 대상 배열 원본이 변경됨.
// 요소 여러 개를 한 번에 추가 가능.

fruits = ["Apple", "Banana", "Cherry"];
let newLength = fruits.push("Orange");
console.log(newLength); // 4
console.log(fruits); // ['Apple', 'Banana', 'Cherry', 'Orange']

fruits.push("Mango", "Strawberry");
console.log(fruits); // ['Apple', 'Banana', 'Cherry', 'Orange', 'Mango', 'Strawberry']

// .reduce()
// 대상 배열의 길이만큼 주어진 콜백을 실행하고, 마지막에 호출되는 콜백의 반환 값을 반환함.
// 각 콜백의 반환 값은 다음 콜백으로 전달됨.

numbers = [1, 2, 3, 4, 5, 6];
let sum = numbers.reduce((accumulator, currentValue) => {
  return accumulator + currentValue;
}, 0);
console.log(sum); // 21
sum = numbers.reduce((acc, cur) => acc + cur, 0);
console.log(sum); // 21

users = [
  { name: "John", age: 23 },
  { name: "Neo", age: 30 },
  { name: "Lewis", age: 45 },
];

// 총 나이 계산
const totalAge = users.reduce((acc, cur) => acc + cur.age, 0);
console.log(totalAge); // 98
console.log((totalAge / users.length).toFixed(1)); // 32.7
// 모든 이름 추출
const names = users
  .reduce((acc, cur) => {
    acc.push(cur.name);
    return acc;
  }, [])
  .join(", ");
console.log(names); // John, Neo, Lewis

// .reverse()
// 대상 배열의 순서를 반전하고, 반전된 배열을 반환함.
// 대상 배열 원본이 변경됨.

arr = ["A", "B", "C"];
const reversed = arr.reverse();
console.log(reversed); // ['C', 'B', 'A']
console.log(arr); // ['C', 'B', 'A']

// .shift()
// 대상 배열에서 첫 번째 요소를 제거하고, 제거된 요소를 반환함.
// 대상 배열 원본이 변경됨.

arr = ["A", "B", "C"];
console.log(arr.shift()); // A
console.log(arr); // ['B', 'C']

// .slice()
// 대상 배열의 일부를 추출해 새로운 배열을 반환함.
// 두 번째 인수 직전까지 추출하고, 두 번째 인수를 생략하면 대상 배열의 끝까지 추출함.
// 문자열의 slice() 와 매우 비슷함.

arr = ["A", "B", "C", "D", "E", "F", "G"];

console.log(arr.slice(0, 3)); // ['A', 'B', 'C']
console.log(arr.slice(4, -1)); // ['E', 'F']
console.log(arr.slice(4)); // ['E', 'F', 'G']
console.log(arr); // ['A', 'B', 'C', 'D', 'E', 'F', 'G']
console.log(arr.slice()); // ['A', 'B', 'C', 'D', 'E', 'F', 'G']

// .some()
// 대상 배열의 어떤 요소라도 콜백 테스트를 통과하는지 확인함.
// every()는 모든 요소를 통과해야 하고, some()은 1개이상만 통과하면 됨.

arr = [1, 2, 3, 4];
isValid = arr.some((item) => item > 3);
console.log(isValid); // true

// .sort()
// 대상 배열을 콜백의 반환 값(음수, 양수, 0)에 따라 정렬함.
// 콜백을 제공하지 않으면, 요소를 문자열로 변환하고, 유니코드 코드 포인트 순서로 정렬함.
// 대상 배열 원본이 변경됨.

numbers = [4, 17, 2, 103, 3, 1, 0];
numbers.sort();
console.log(numbers); // [0, 1, 103, 17, 2, 3, 4]

numbers.sort((a, b) => a - b);
console.log(numbers); // [0, 1, 2, 3, 4, 17, 103]

numbers.sort((a, b) => b - a);
console.log(numbers); // [103, 17, 4, 3, 2, 1, 0]

users = [
  { name: "John", age: 53 },
  { name: "Neo", age: 30 },
  { name: "Lewis", age: 45 },
];

users.sort((a, b) => a.age - b.age);
console.log(users); // [{ name: "Neo", age: 30 }, { name: "Lewis", age: 45 }, { name: "John", age: 53 }]

// splice(start[, deleteCount[, item1[, item2[, ...]]]])
// 대상 배열에 요소를 추가하거나 삭제하거나 교체함.
// 대상 배열 원본이 변경됨.

arr = ["A", "B", "C"];
arr.splice(2, 0, "X");
console.log(arr); // ['A', 'B', 'X', 'C']

arr.splice(1, 1);
console.log(arr); // ['A', 'X', 'C']

arr.splice(1, 1, "M", "N", "O");
console.log(arr); // ['A', 'M', 'N', 'O', 'C']

// .unshift()
// 새로운 요소를 대상 배열의 맨 앞에 추가하고 새로운 배열의 길이를 반환함.
// 대상 배열 원본이 변경됨.

arr = ["A", "B", "C"];

console.log(arr.unshift("X")); // 4
console.log(arr); // ['X', 'A', 'B', 'C']

// Array.from() - static
// 유사 배열(Array-like)을 실제 배열로 반환함.

let arrayLike = {
  0: "A",
  1: "B",
  2: "C",
  length: 3,
};

console.log(arrayLike.constructor === Array); // false
console.log(arrayLike.constructor === Object); // true
Array.from(arrayLike).forEach((item) => console.log(item));
// A
// B
// C

// Array.isArray() - static
// 배열 데이터인지 확인함.

array = ["A", "B", "C"];
arrayLike = {
  0: "A",
  1: "B",
  2: "C",
  length: 3,
};

console.log(Array.isArray(array)); // true
console.log(Array.isArray(arrayLike)); // false
