// 이벤트 전파(버블) 정지
// 자식 요소에 대한 이벤트는 모든 조상 요소의 이벤트를 같이 발생시킴.
// event.stopPropagation()을 통해 상위 요소로의 버블링을 막는다.

let parentEl = document.querySelector(".parent");
let childEl = document.querySelector(".child");
let anchorEl = document.querySelector("a");

window.addEventListener("click", (event) => {
  console.log("window!");
});
document.body.addEventListener("click", (event) => {
  console.log("Body!");
});
parentEl.addEventListener("click", (event) => {
  console.log("Parent!");
  event.stopPropagation(); // 버블링 정지!!
  // a태그를 클릭하면 Anchor, child, parent, body, window를 모두 출력함.
  // stopPropagation()을 통해 버블링을 정지하면, parent까지만 출력됨.
  // 상위 요소로의 버블링을 막음.
});
childEl.addEventListener("click", (event) => {
  console.log("Child!");
  event.stopPropagation();
});
anchorEl.addEventListener("click", (event) => {
  console.log("Anchor!");
});


// 캡쳐링
// capture: true
// 하위 요소로부터 상위 요소로 차례대로 버블링 되어 이벤트가 발생하나
// capture: true 가 있는 경우 먼저 이벤트가 발생한다.
// capture 옵션이 있는 것들 중에서는 상위 요소부터 하위 요소로 발생되고, 나머지 중에서 하위 요소부터 상위요소 방향으로 발생한다.
let parentEl = document.querySelector(".parent");
let childEl = document.querySelector(".child");
let anchorEl = document.querySelector("a");

window.addEventListener("click", (event) => {
  console.log("window!");
});
document.body.addEventListener(
  "click",
  (event) => {
    console.log("Body!");
  },
  { capture: true }
);
parentEl.addEventListener(
  "click",
  (event) => {
    console.log("Parent!");
  },
  { capture: true }
);
childEl.addEventListener("click", (event) => {
  console.log("Child!");
});
anchorEl.addEventListener("click", (event) => {
  console.log("Anchor!");
});

// capture + stopPropagation()
// 위에서 언급한 순서대로 이벤트가 진행하되, stopPropagation()을 만나면 그 다음 이벤트부터는 발생하지 않는다.

let parentEl = document.querySelector(".parent");
let childEl = document.querySelector(".child");
let anchorEl = document.querySelector("a");

window.addEventListener(
  "click",
  (event) => {
    console.log("window!");
  },
  { capture: true }
);
document.body.addEventListener(
  "click",
  (event) => {
    console.log("Body!");
    event.stopPropagation();
  },
  { capture: true }
);
parentEl.addEventListener(
  "click",
  (event) => {
    console.log("Parent!");
  },
  { capture: true }
);
childEl.addEventListener("click", (event) => {
  console.log("Child!");
});
anchorEl.addEventListener("click", (event) => {
  console.log("Anchor!");
});

// capture 옵션 사용시 그 다음의 removeEventListener는 작동하지 않음.

let parentEl = document.querySelector(".parent");

const handler = () => {
  console.log("Parent!");
};

parentEl.addEventListener("click", handler, { capture: true });
parentEl.removeEventListener("click", handler);
// 이 코드에서 removeEventListener 는 작동하지 않음. 작동하게 하고 싶으면 removeEventListener에도 capture를 사용해줘야 함.

let parentEl = document.querySelector(".parent");

const handler = () => {
  console.log("Parent!");
};

parentEl.addEventListener("click", handler, { capture: true });
parentEl.removeEventListener("click", handler, { capture: true });
