// Promise
// new Promise의 return은 Promise() 소괄호 안의 콜백함수의 실행과 같다.(?)


const a = () => console.log(1);
a(); // 1

const b = () => new Promise(() => console.log(2));
b(); // 2


// 이 코드에서 (1)과 (2)는 둘다 같은 결과를 보임


// (1) 기본코드, console.log(value) 다음에 console.log('실행완성!')이 출력되는 것은 보장되나, 1,2,3,4의 순서는 보장되지 않음.
const a = (value, callback) => {
  setTimeout(() => {
    console.log(`${value} 데이터를 받아옴`);
    if (callback) callback();
  }, Math.floor(Math.random() * 500 + 500));
};
a(1, () => console.log("1을 화면에 출력하는 코드"));
a(2, () => console.log("2를 화면에 출력하는 코드"));
a(3, () => console.log("3을 화면에 출력하는 코드"));
a(4, () => console.log("4를 화면에 출력하는 코드"));

<console 출력값>
1 데이터를 받아옴
1을 화면에 출력하는 코드
4 데이터를 받아옴
4를 화면에 출력하는 코드
3 데이터를 받아옴
3을 화면에 출력하는 코드
2 데이터를 받아옴
2를 화면에 출력하는 코드

// (2) Promise만 적용된 상태 (1)과 같은 결과를 보임.
const a = (value, callback) =>
  new Promise(() => {
    setTimeout(() => {
      console.log(`${value} 데이터를 받아옴`);
      if (callback) callback();
    }, Math.floor(Math.random() * 500 + 500));
  });
a(1, () => console.log("1을 화면에 출력하는 코드"));
a(2, () => console.log("2를 화면에 출력하는 코드"));
a(3, () => console.log("3을 화면에 출력하는 코드"));
a(4, () => console.log("4를 화면에 출력하는 코드"));

<console 출력값>
1 데이터를 받아옴
1을 화면에 출력하는 코드
4 데이터를 받아옴
4를 화면에 출력하는 코드
3 데이터를 받아옴
3을 화면에 출력하는 코드
2 데이터를 받아옴
2를 화면에 출력하는 코드

// (3) 위의 출력순서를 보장하나, 역시나 콜백지옥
const a = (value, callback) =>
  new Promise(() => {
    setTimeout(() => {
      console.log(`${value} 데이터를 받아옴`);
      if (callback) callback();
    }, Math.floor(Math.random() * 500 + 500));
  });
a(1, () => {
  console.log("1을 화면에 출력하는 코드");
  a(2, () => {
    console.log("2를 화면에 출력하는 코드");
    a(3, () => {
      console.log("3을 화면에 출력하는 코드");
      a(4, () => console.log("4를 화면에 출력하는 코드"));
    });
  });
});

<console 출력값>
1 데이터를 받아옴
1을 화면에 출력하는 코드
2 데이터를 받아옴
2를 화면에 출력하는 코드
3 데이터를 받아옴
3을 화면에 출력하는 코드
4 데이터를 받아옴
4를 화면에 출력하는 코드


// (4) (2)의 코드에서 then만 추가.
// callback 매개변수를 빼고, Promise 내부에 resolve 매개변수를 넣음. callback으로 넣었던 console.log() 코드를 then의 소괄호 안에 넣어주면 순차적으로 실행됨.
// Promise를 반환되는 것에 .then()을 붙일 수 있고, then의 소괄호 내부에 바로 다음에 실행되기를 원하는 코드를 넣으면 됨.
// then()이 Promise를 return하도록 코딩하면 then다음에 then을 체이닝으로 붙일 수 있다.
// 결과는 위의 (2)와 같음 
const a = (value) =>
  new Promise((resolve) => {
    setTimeout(() => {
      console.log(`${value} 데이터를 받아옴`);
      if (resolve) resolve();
    }, Math.floor(Math.random() * 500 + 500));
  });
a(1).then(() => console.log("1을 화면에 출력하는 코드"));
a(2).then(() => console.log("2를 화면에 출력하는 코드"));
a(3).then(() => console.log("3을 화면에 출력하는 코드"));
a(4).then(() => console.log("4를 화면에 출력하는 코드"));

<console 출력값>
1 데이터를 받아옴
1을 화면에 출력하는 코드
4 데이터를 받아옴
4를 화면에 출력하는 코드
3 데이터를 받아옴
3을 화면에 출력하는 코드
2 데이터를 받아옴
2를 화면에 출력하는 코드

// (5) then을 이어붙임. 콜백지옥에서 벗어남.
const a = (value) =>
  new Promise((resolve) => {
    setTimeout(() => {
      console.log(`${value} 데이터를 받아옴`);
      if (resolve) resolve();
    }, Math.floor(Math.random() * 500 + 500));
  });
a(1)
  .then(() => {
    console.log("1을 화면에 출력하는 코드");
    return a(2);
  })
  .then(() => {
    console.log("2를 화면에 출력하는 코드");
    return a(3);
  })
  .then(() => {
    console.log("3을 화면에 출력하는 코드");
    return a(4);
  })
  .then(() => console.log("4를 화면에 출력하는 코드"));

<console 출력값>
1 데이터를 받아옴
1을 화면에 출력하는 코드
2 데이터를 받아옴
2를 화면에 출력하는 코드
3 데이터를 받아옴
3을 화면에 출력하는 코드
4 데이터를 받아옴
4를 화면에 출력하는 코드



// 영화 데이터를 가져오는 예시

// (1) 다음은 영화의 출력 순서를 보장하지 않음.
let getMovies = (movieName, callback) => {
  fetch(`https://www.omdbapi.com/?apikey=7035c60c&s=${movieName}`)
    .then((res) => res.json())
    .then((res) => {
      console.log(movieName, res);
      if (callback) callback();
    });
};

getMovies("frozen", () => console.log("겨울왕국 데이터 출력"));
getMovies("avengers", () => console.log("어벤져스 데이터 출력"));
getMovies("avatar", () => console.log("아바타 데이터 출력"));

<console 출력값>
avengers {Search: Array(10), totalResults: '147', Response: 'True'}
어벤져스 데이터 출력
frozen {Search: Array(10), totalResults: '350', Response: 'True'}
겨울왕국 데이터 출력
avatar {Search: Array(10), totalResults: '104', Response: 'True'}
아바타 데이터 출력

// (2) promise를 추가하였으나 출력 순서를 보장하지 않음, (1)과 같은 결과
let getMovies = (movieName, callback) =>
  new Promise(() => {
    fetch(`https://www.omdbapi.com/?apikey=7035c60c&s=${movieName}`)
      .then((res) => res.json())
      .then((res) => {
        console.log(movieName, res);
        if (callback) callback();
      });
  });

getMovies("frozen", () => console.log("겨울왕국 데이터 출력"));
getMovies("avengers", () => console.log("어벤져스 데이터 출력"));
getMovies("avatar", () => console.log("아바타 데이터 출력"));

<console 출력값>
avengers {Search: Array(10), totalResults: '147', Response: 'True'}
어벤져스 데이터 출력
frozen {Search: Array(10), totalResults: '350', Response: 'True'}
겨울왕국 데이터 출력
avatar {Search: Array(10), totalResults: '104', Response: 'True'}
아바타 데이터 출력

// (3) then을 추가함, 출력 순서를 보장하지 않음. (2)와 같은 결과
let getMovies = (movieName) =>
  new Promise((resolve) => {
    fetch(`https://www.omdbapi.com/?apikey=7035c60c&s=${movieName}`)
      .then((res) => res.json())
      .then((res) => {
        console.log(movieName, res);
        if (resolve) resolve();
      });
  });

getMovies("frozen").then(() => console.log("겨울왕국 데이터 출력"));
getMovies("avengers").then(() => console.log("어벤져스 데이터 출력"));
getMovies("avatar").then(() => console.log("아바타 데이터 출력"));

<console 출력값>
avengers {Search: Array(10), totalResults: '147', Response: 'True'}
어벤져스 데이터 출력
frozen {Search: Array(10), totalResults: '350', Response: 'True'}
겨울왕국 데이터 출력
avatar {Search: Array(10), totalResults: '104', Response: 'True'}
아바타 데이터 출력

// (4) then을 이어붙여 출력 순서를 보장함. 콜백 지옥에서 벗어남.
let getMovies = (movieName) =>
  new Promise((resolve) => {
    fetch(`https://www.omdbapi.com/?apikey=7035c60c&s=${movieName}`)
      .then((res) => res.json())
      .then((res) => {
        console.log(movieName, res);
        if (resolve) resolve();
      });
  });

getMovies("frozen")
  .then(() => {
    console.log("겨울왕국 데이터 출력");
    return getMovies("avengers");
  })
  .then(() => {
    console.log("어벤져스 데이터 출력");
    return getMovies("avatar");
  })
  .then(() => console.log("아바타 데이터 출력"));

<console 출력값>
frozen {Search: Array(10), totalResults: '350', Response: 'True'}
겨울왕국 데이터 출력
avengers {Search: Array(10), totalResults: '147', Response: 'True'}
어벤져스 데이터 출력
avatar {Search: Array(10), totalResults: '104', Response: 'True'}
아바타 데이터 출력
