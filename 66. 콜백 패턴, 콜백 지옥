// 동기(Synchronous)와 비동기(Asynchronous)
// - 동기: 순차적으로 코드 실행 O
// - 비동기: 순차적으로 코드 실행 X

// 콜백(Callback) 패턴 -> 콜백 지옥이 됨.

// 아래는 1, 2, 3, 4의 출력 순서를 보장하지 않음.
let a = (callback, index) => {
  setTimeout(() => {
    console.log(index);
    callback();
  }, Math.floor(Math.random() * 500 + 500));
};

a(() => {}, 1);
a(() => {}, 2);
a(() => {}, 3);
a(() => {}, 4);

// 1, 2, 3, 4의 출력 순서를 보장하기 위해 아래와 같이 콜백 패턴으로 코드를 작성함.
// 콜백이 들여쓰기 형태로 계속 들어가므로, 콜백 지옥이 됨.

a(() => {
  a(() => {
    a(() => {
      a(() => {}, 4);
    }, 3);
  }, 2);
}, 1);

// 아래는 위의 코드에서 callback을 추가함.

// setTimeout()은 영화 데이터를 받아오는 시간이 필요하다는 것을 의미하는 코드
// console.log(value)가 실행된다는 것은 영화 데이터가 다 받아와졌다는 것을 알려주는 의미를 갖는 코드
// console.log('1실행완성!')은 영화 데이터를 받아온 후 영화 데이터를 화면에 출력해주는 코드를 의미함. 그래서 영화 데이터를 받아 온 후에 실행되어야 함.
// console.log(`${value} 데이터를 받아옴`); 와 console.log("1을 화면에 출력하는 코드") 의 순서는 보장되나,
// 1, 2, 3, 4의 순서는 보장되지 않음.
const a = (value, callback) => {
  setTimeout(() => {
    console.log(`${value} 데이터를 받아옴`);
    if (callback) callback();
  }, Math.floor(Math.random() * 500 + 500));
};
a(1, () => console.log("1을 화면에 출력하는 코드"));
a(2, () => console.log("2를 화면에 출력하는 코드"));
a(3, () => console.log("3을 화면에 출력하는 코드"));
a(4, () => console.log("4를 화면에 출력하는 코드"));

<console 출력값>
3 데이터를 받아옴
3을 화면에 출력하는 코드
4 데이터를 받아옴
4를 화면에 출력하는 코드
2 데이터를 받아옴
2를 화면에 출력하는 코드
1 데이터를 받아옴
1을 화면에 출력하는 코드

// 순서를 보장하기 위한 콜백 패턴, 콜백 지옥
const a = (value, callback) => {
  setTimeout(() => {
    console.log(`${value} 데이터를 받아옴`);
    if (callback) callback();
  }, Math.floor(Math.random() * 500 + 500));
};
a(1, () => {
  console.log("1을 화면에 출력하는 코드");
  a(2, () => {
    console.log("2를 화면에 출력하는 코드");
    a(3, () => {
      console.log("3을 화면에 출력하는 코드");
      a(4, () => console.log("4를 화면에 출력하는 코드"));
    });
  });
});

<console 출력값>
1 데이터를 받아옴
1을 화면에 출력하는 코드
2 데이터를 받아옴
2를 화면에 출력하는 코드
3 데이터를 받아옴
3을 화면에 출력하는 코드
4 데이터를 받아옴
4를 화면에 출력하는 코드


// 아래의 코드는 영화 순서가 보장되지 않는다.
// 영화 데이터를 받아오는 시간이 영화마다 다르고, 불러올 때마다 다르기 때문이다.
let getMovies = (movieName, callback) => {
  fetch(`https://www.omdbapi.com/?apikey=7035c60c&s=${movieName}`)
    .then((res) => res.json())
    .then((res) => {
      console.log(res);
      if (callback !== undefined) callback();
    });
};

getMovies("frozen", () => {
  console.log("겨울왕국!");
});
getMovies("avengers", () => {
  console.log("어벤져스!");
});
getMovies("avatar", () => {
  console.log("아바타!");
});

// 겨울왕국->어벤져스->아바타 실행 순서 보장하기
// 그러나 코드가 들여쓰기 형태로 파고들어가서 콜백지옥이 됨.
// 콜백패턴은 오래전부터 사용해왔지만, 콜백지옥이 되는 단점이 있다.

getMovies("frozen", () => {
  console.log("겨울왕국!");
  getMovies("avengers", () => {
    console.log("어벤져스!");
    getMovies("avatar", () => {
      console.log("아바타!");
    });
  });
});
