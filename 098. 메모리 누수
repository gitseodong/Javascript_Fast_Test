// 메모리 누수(Memory Leak)

// 더 이상 필요하지 않은 데이터가 해제되지 못하고 메모리를 계속 차지하는 현상

// (1) 불필요한 전역 변수 사용

window.hello = "Hello world!";
window.heropy = { name: "Heropy", age: 85 };
// window라는 전역객체에 등록된 데이터는 사용되지 않더라도 사용되는 것으로 인식.

// (2) 분리된 노드 참조
const btn = document.querySelector("button");
const parent = document.querySelector(".parent");

btn.addEventListener("click", () => {
  console.log(parent);
  parent.remove();
});
// parent.remove() 를 통해 요소를 제거했어도 parent 변수에는 그 주소가 남아있다.
// 다음과 같이 parent 변수를 EventListener 내부로 옮겨줌으로써 parent 변수도 사라지게 할 수 있다.
// parent가 삭제된 뒤에 버튼 클릭시 parent에는 null이 할당되고, parent.remove()에서 오류가 나게 되므로 ? 를 붙여준다.
const btn = document.querySelector("button");

btn.addEventListener("click", () => {
  const parent = document.querySelector(".parent"); // querySelector에서 요소를 찾지 못하면 null이 반환됨.
  console.log(parent);
  parent?.remove(); // 또는 parent && parent.remove() 를 써준다. parent가 null이면 parent를 반환하고, parent가 null이 아니면 parent.remove()를 실행한다.
});

// (3) 해제하지 않은 타이머

let a = 0;
setInterval(() => {
  a++;
}, 100);

setTimeout(() => {
  console.log(a);
}, 1000);
// 이 경우 setInterval이 0.1초마다 계속 실행됨.
// 다음과 같이 clearInterval을 통해 setInterval 작동을 멈춰줄 수 있다.

let a = 0;
const interval = setInterval(() => {
  a++;
}, 100);

setTimeout(() => {
  console.log(a);
  clearInterval(interval);
}, 1000);


// (4) 잘못된 클로저 사용

