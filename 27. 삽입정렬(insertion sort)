// let arr = Array.from({legnth:30000}, () => Math.floor(Math.random() * 1000));
let arr = Array.from({length: 30000}, () => Math.floor(Math.random()*1000));
//아래건 되고, 위에건 안됨???
console.log(arr);
let startTime = new Date().getTime();

// 삽입정렬: 첫 번째 칸은 정렬되어 있다고 가정함. 그 후 두 번째 칸부터 바로왼쪽과 비교하여 작으면 왼쪽의 적절한 위치로 보냄. 
// 이미 정렬된 배열의 경우 속도가 매우 빠름. 정렬된 상태일 때 break;로 빠져나오기 때문이다.
//최악의 경우 O(N제곱)의 시간복잡도, 최선의 경우(이미 정렬되어 있는 경우) O(N)의 시간복잡도를 가진다.
function insertionSort(arr) {
  for (let i = 1; i < arr.length; i++) {
    for (let j = i; j >= 1; j--) {
      if (arr[j] < arr[j-1]) {
        const temp = arr[j];
        arr[j] = arr[j-1];
        arr[j-1] = temp;
      } else {
        break;
      }
    }
  }
}
insertionSort(arr)
let endTime = new Date().getTime();
console.log('걸린시간:', endTime - startTime, 'ms');
console.log(arr);
