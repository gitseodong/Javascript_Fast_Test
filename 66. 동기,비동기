// 동기(Synchronous)와 비동기(Asynchronous)
// - 동기: 순차적으로 코드 실행 O
// - 비동기: 순차적으로 코드 실행 X

fetch("https://www.omdbapi.com/?apikey=7035c60c&s=frozen")
  .then((res) => res.json())
  .then((res) => console.log(res));

console.log(1);
console.log(2);
console.log(3);

// 콜백(Callback) 패턴

// 아래의 코드는 영화 순서가 보장되지 않는다.
const getMovies = (movieName, callback) => {
  fetch(`https://www.omdbapi.com/?apikey=7035c60c&s=${movieName}`)
    .then((res) => res.json())
    .then((res) => {
      console.log(res);
      if (callback !== undefined) callback();
    });
};

getMovies("frozen", () => {
  console.log("겨울왕국!");
});
getMovies("avengers", () => {
  console.log("어벤져스!");
});
getMovies("avatar", () => {
  console.log("아바타!");
});

// 겨울왕국->어벤져스->아바타 실행 순서 보장하기
// 그러나 코드가 들여쓰기 형태로 파고들어가서 콜백지옥이 됨.
// 콜백패턴은 오래전부터 사용해왔지만, 콜백지옥이 되는 단점이 있다.
getMovies("frozen", () => {
  console.log("겨울왕국!");
  getMovies("avengers", () => {
    console.log("어벤져스!");
    getMovies("avatar", () => {
      console.log("아바타!");
    });
  });
});

// Promise
