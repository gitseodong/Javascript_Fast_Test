// 클로저(Closure)

// (1) 클로저를 사용하지 않은 코드

const message = "Hello";

function innerFunction() {
  console.log(message);
}

const myFunction = innerFunction;
myFunction();

// (2) 클로저를 사용한 코드

function outerFunction() {
    const message = "Hello";
  
    function innerFunction() {
      console.log(message);
    }
  
    return innerFunction;
  }
  
  const myFunction = outerFunction();
  myFunction();
  
  // (1)과 (2)의 차이는 변수 message와 innerFunction 사이의 연관성과 데이터의 은닉성이다.
  // (1) 코드에서는 message 변수가 전역 스코프에 있어 모든 함수와 코드에서 접근이 가능하다.
  // 이 경우 innerFunction이 전역 스코프의 message 변수를 참조하게 된다.
  // (2) 코드에서는 클로저를 사용하여 message 변수와 innerFunction을 outFunction 스코프 안에서 한데 묵어놨다.
  // 이렇게 하면 message 변수를 외부에서 직접 접근할 수 없으며, 데이터의 은닉성이 보장된다.
  // 또한, outerFunction을 통해 생성된 여러 개의 innerFunction 인스턴스가 각각 독립적으로 message 변수를 참조할 수 있게 된다.
  // 이러한 종속성 및 은닉성을 유지하기 위해 클로저를 사용한다.
  // 결론적으로, 클로저를 사용하는 (2) 코드는 message 변수와 innerFunction을 한데 묶어,
  // 종속성과 데이터 은닉성을 강화하는데 도움이 된다.
  // 이를 통해 코드를 더욱 모듈화하면서 함수 간의 상호 작용을 명확하게 할 수 있다.
