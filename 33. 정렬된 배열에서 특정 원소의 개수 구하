// 정렬된 배열에서 특정 원소의 개수 구하기
// array.filter & length를 이용한 것보다 countByRange가 훨씬 빠름. filter&length:385ms, countByRange:1ms
//전체 코드 복사하여 걸리는 시간 체크 가능.

// 정렬된 순서를 유지하면서 배열에 삽입할 가장 왼쪽 인덱스 반환
function lowerBound(arr, target, start, end) {
  while (start < end) {
    let mid = parseInt((start + end) / 2);
    if (arr[mid] >= target) end = mid;
    else start = mid + 1;
  }
  return end;
}

// 정렬된 순서를 유지하면서 삽입할 가장 오른쪽 인덴스 반환
function upperBound(arr, target, start, end) {
  while (start < end) {
    let mid = parseInt((start + end) / 2);
    if (arr[mid] <= target) start = mid + 1;
    else end = mid;
  }
  return end;
}

// countByRange() : 정렬된 배열에서 값이 특정 범위(leftValue~rightValue)
//에 속하는 원소의 개수를 계산함.
function countByRange(arr, leftValue, rightValue) {
  // 유의 : lowerBound와 upperBound는 end 변수의 값을 배열의 길이로 설정.
  let rightIndex = upperBound(arr, rightValue, 0, arr.length);
  let leftIndex = lowerBound(arr, leftValue, 0, arr.length);
  return rightIndex - leftIndex;
}

let n = 10000000;
let time1 = new Date().getTime();
let arr = Array.from({length: n}, () => Math.floor(Math.random() * n / 10));
let time2 = new Date().getTime();
arr.sort((a, b) => a - b);
let time3 = new Date().getTime();
// 값이 [-1, 3] 범위에 있는 데이터 개수 출력
let count1 = countByRange(arr, 50000, 60000);
let time4 = new Date().getTime();
let count2 = arr.filter(a => a >= -1 && a <= 3).length;
let time5 = new Date().getTime();

console.log('함수생성시간:', time2 - time1, 'ms');
console.log('함수정렬시간:', time3 - time2, 'ms');
console.log('countByRange:', time4 - time3, 'ms');
console.log('filter:', time5 - time4, 'ms');
