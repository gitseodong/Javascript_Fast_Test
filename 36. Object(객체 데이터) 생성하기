// 객체데이터(Object) 를 만드는 3가지 방법
// 점 표기법, 대괄호 표기법
// key를 변수에 넣어서 활용하기

// 객체 데이터 안에서 key의 순서는 없음. key가 고유하기 때문.
// 같은 key에 두 번의 value를 넣을 경우 나중에 넣은 value가 남는다.



// 1) 내장 생성자 함수를 이용하는 방법
const user1 = new Object();

user1.name = "John";
user1.email = "John@example.com";
user1.age = 25;

console.log(user1); // {name: 'John', email: 'John@example.com', age: 25}
console.log(user1.name); // John - 점 표기법
console.log(user1["name"]); // John - 대괄호 표기법

// 2) 생성자 함수를 이용하는 방법
// User2라는 생성자 함수를 정의하고, new User2 를 통해 객체를 인스턴스화하고 초기화함.
function User2(name, email, age) {
  this.name = name;
  this.email = email;
  this.age = age;
}

const user2 = new User2('John', 'John@example.com', 25);

console.log(user2); // User2 {name: 'John', email: 'John@example.com', age: 25}
console.log(user2.name); // John
console.log(user2["name"]); // John

// 3) 객체 리터럴을 이용하는 방법
const user3 = {
  name: "John",
  email: "John@example.com",
  age: 25,
};

console.log(user3); // {name: 'John', email: 'John@example.com', age: 25}
console.log(user3.name); // John
console.log(user3["name"]); // JOhn

// 'name' 문자열을 변수 key에 넣어서 활용하는 방법
const key = 'name';
console.log(user3[key]); // John  - 이와 같이 데이터로 속성의 이름을 조회할 때는 대괄호 표기법으로만 가능함.


// 2) 생성자 함수를 이용하는 방법과 3) 객체 리터럴을 이용하는 방법의 차이점 4가지 (from chatGPT)

//  a) 생성방식
//   2)User 생성자 함수를 new 키워드와 함께 호출하여 객체를 생성합니다. 생성자 함수 내에서 this 키워드를 사용하여 객체의 속성을 초기화합니다.
//   3)객체 리터럴을 이용한 생성: 객체 리터럴 {}을 사용하여 객체를 직접 생성합니다. 객체 리터럴을 사용할 때는 별도의 생성자 함수를 정의하지 않고도 객체를 만들 수 있습니다.

//  b) 속성 초기화
//   2)생성자 함수 내에서 this를 사용하여 객체의 속성을 초기화합니다. 생성자 함수를 통해 객체를 생성할 때 매개변수를 전달하여 각 속성을 초기화합니다.
//   3)객체 리터럴을 이용한 생성: 객체 리터럴을 사용하여 객체를 생성할 때는 속성과 값을 직접 지정합니다.

//  c) 재사용성
//   2) 생성자 함수를 사용하여 객체를 생성할 때는 같은 구조의 객체를 여러 개 생성할 수 있습니다. 생성자 함수를 재사용하여 다른 인자를 전달하여 새로운 객체를 만들 수 있습니다.
//   3) 객체 리터럴을 이용한 생성: 객체 리터럴을 사용하여 객체를 생성하면 하나의 객체만 생성됩니다. 재사용성이 없으며, 필요한 경우 같은 구조의 객체를 여러 개 생성하려면 일일이 객체 리터럴을 사용해야 합니다.

//  d) 프로토타입
//   2) 생성자 함수를 사용하여 객체를 생성할 때, 해당 생성자 함수의 프로토타입에 정의된 메소드들을 모든 객체가 공유합니다. 이를 통해 메모리를 절약하고 메소드들을 재사용할 수 있습니다.
//   3) 객체 리터럴을 이용한 생성: 객체 리터럴을 사용하여 생성된 객체는 프로토타입을 공유하지 않으며, 각 객체마다 별도의 메소드를 가질 수 있습니다.
